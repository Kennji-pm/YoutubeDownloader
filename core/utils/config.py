import os
import json
from dotenv import load_dotenv
from ..header import Header

class Configure():
    def __init__(self):
        self.project_root = "youtube_downloader_projects"
        self.audio_folder = os.path.join(self.project_root, "audio")
        self.video_folder = os.path.join(self.project_root, "video")
        self.thumbnail_folder = os.path.join(self.project_root, "thumbnail")
        self.config_file = os.path.join(self.project_root, "config.json")
        self.max_workers = 4

        self.filter_options = {
            'upload_date': 'Today',
            'type': 'Video',
            'duration': 'Under 4 minutes',
            'features': ['4K', 'Creative Commons'],
            'sort_by': 'Upload date'
        }

        load_dotenv()

        os.makedirs(self.audio_folder, exist_ok=True)
        os.makedirs(self.video_folder, exist_ok=True)
        os.makedirs(self.thumbnail_folder, exist_ok=True)
        
        # T·∫£i c·∫•u h√¨nh n·∫øu c√≥
        self.load_config()

        self.header = Header()

    def _max_workers(self):
        return self.max_workers
    
    def load_config(self):
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, "r") as f:
                    config = json.load(f)
                    if "max_workers" in config:
                        self.max_workers = config["max_workers"]
                    if "folders" in config:
                        self.audio_folder = config["folders"].get("audio", self.audio_folder)
                        self.video_folder = config["folders"].get("video", self.video_folder)
                        self.thumbnail_folder = config["folders"].get("thumbnail", self.thumbnail_folder)
                    if "filters" in config:
                        self.filter_options = config["filters"]

        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc file c·∫•u h√¨nh: {str(e)}")
    
    def save_config(self):
        """L∆∞u c·∫•u h√¨nh v√†o file config.json"""
        try:
            config = {
                'max_workers': self.max_workers,
                'folders': {
                    'audio': self.audio_folder,
                    'video': self.video_folder,
                    'thumbnail': self.thumbnail_folder
                },
                'filters': self.filter_options
            }
            
            os.makedirs(os.path.dirname(self.config_file), exist_ok=True)
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=4, ensure_ascii=False)
                
            print(f"‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh v√†o {self.config_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u file c·∫•u h√¨nh: {str(e)}")

    def configure_threading(self):
        """C·∫•u h√¨nh s·ªë lu·ªìng t·ªëi ƒëa"""
        self.header._print_header("C·∫•u h√¨nh lu·ªìng")
        print(f"S·ªë lu·ªìng hi·ªán t·∫°i: {self.max_workers}")
        
        try:
            new_workers = input(f"Nh·∫≠p s·ªë lu·ªìng m·ªõi (1-16, m·∫∑c ƒë·ªãnh: {self.max_workers}): ").strip()
            if new_workers:
                new_workers = int(new_workers)
                if 1 <= new_workers <= 16:
                    self.max_workers = new_workers
                    print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë lu·ªìng th√†nh: {self.max_workers}")
                else:
                    print("‚ö†Ô∏è S·ªë lu·ªìng ph·∫£i t·ª´ 1-16, gi·ªØ nguy√™n gi√° tr·ªã hi·ªán t·∫°i.")
            else:
                print(f"‚úÖ Gi·ªØ nguy√™n s·ªë lu·ªìng: {self.max_workers}")
        except ValueError:
            print("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, gi·ªØ nguy√™n s·ªë lu·ªìng hi·ªán t·∫°i.")
        
        # L∆∞u c·∫•u h√¨nh sau khi thay ƒë·ªïi
        self.save_config()
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

    def configure_folders(self):
        """C·∫•u h√¨nh th∆∞ m·ª•c l∆∞u tr·ªØ"""
        while True:
            self.header._print_header("C·∫•u h√¨nh th∆∞ m·ª•c")
            print(f"Th∆∞ m·ª•c l∆∞u tr·ªØ hi·ªán t·∫°i:")
            print(f"    üéµAudio: {self.audio_folder}")
            print(f"    üé•Video: {self.video_folder}")
            print(f"    üñºÔ∏èThumbnail: {self.thumbnail_folder}")
            print("=" * 70)
            print(" [1] Change Audio folder")
            print(" [2] Change Video folder")
            print(" [3] Change Thumbnail folder")
            print(" [0] Back")
            print("=" * 70)
            try:
                choice = input("Enter your option: ").strip()
                if choice == "1":
                    new_audio_folder = input(f"Nh·∫≠p th∆∞ m·ª•c m·ªõi (m·∫∑c ƒë·ªãnh: {self.audio_folder}): ").strip()
                    if new_audio_folder:
                        self.audio_folder = new_audio_folder
                        os.makedirs(self.audio_folder, exist_ok=True)
                        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t th∆∞ m·ª•c l∆∞u tr·ªØ audio th√†nh: {self.audio_folder}")
                        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    else:
                        print(f"‚úÖ Gi·ªØ nguy√™n th∆∞ m·ª•c l∆∞u tr·ªØ audio: {self.audio_folder}")
                        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                elif choice == "2":
                    new_video_folder = input(f"Nh·∫≠p th∆∞ m·ª•c m·ªõi (m·∫∑c ƒë·ªãnh: {self.video_folder}): ").strip()
                    if new_video_folder:
                        self.video_folder = new_video_folder
                        os.makedirs(self.video_folder, exist_ok=True)
                        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t th∆∞ m·ª•c l∆∞u tr·ªØ video th√†nh: {self.video_folder}")
                        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    else:
                        print(f"‚úÖ Gi·ªØ nguy√™n th∆∞ m·ª•c l∆∞u tr·ªØ video: {self.video_folder}")
                        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                elif choice == "3":
                    new_thumbnail_folder = input(f"Nh·∫≠p th∆∞ m·ª•c m·ªõi (m·∫∑c ƒë·ªãnh: {self.thumbnail_folder}): ").strip()
                    if new_thumbnail_folder:
                        self.thumbnail_folder = new_thumbnail_folder
                        os.makedirs(self.thumbnail_folder, exist_ok=True)
                        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t th∆∞ m·ª•c l∆∞u tr·ªØ thumbnail th√†nh: {self.thumbnail_folder}")
                        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                    else:
                        print(f"‚úÖ Gi·ªØ nguy√™n th∆∞ m·ª•c l∆∞u tr·ªØ thumbnail: {self.thumbnail_folder}")
                        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                elif choice == "0":
                    break
                else:
                    print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
                    input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

                # L∆∞u c·∫•u h√¨nh sau khi thay ƒë·ªïi
                self.save_config()

            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói: {str(e)}")
                input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                break